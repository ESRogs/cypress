// Store all of the data from calculating the minimal set
minimalPatients = <%= raw @patient_list.as_json.to_json %>;
overflow = <%= raw @overflow.as_json.to_json %>;
coverage = <%= raw @coverage.as_json.to_json %>;
minimalCount = minimalPatients.length;

// Render the minimal set matrix
$('#measure_coverage').html("<%= escape_javascript(render :partial => 'measure_coverage', :locals => { :coverage => @coverage, :patients => @patient_list }) %>");
$("#save_population").show();
updateMatrix();

/* EVENTS */
/* On hover, highlight the matching measures for patients or the matching patients for measures */
$('tr.patient td').on("mouseenter mouseout", highlightMeasures);
$('tr.measure td').on("mouseenter mouseout", highlightPatients);

/* Add a patient from the list of overflow */
$("#add_patient").click(function() {
  var patient = addMinimalPatient();
  
  // If we successfully added an overflow patient, create an entry for them and update the view
  if (patient) {
    createMinimalPatientRow(patient);
    updateOverflowButtons();
    
    // Update all of the buckets in the matrix that this patient affects
    for (m in patient.measures)
      updateMatrixByMeasure(patient.measures[m]);
  }
});

/* Remove a patient from the patientList and return them to overflow */
$("#remove_patient").click(function() {
  if (removeMinimalPatient()) {
    updateOverflowButtons();

    // Actually remove the row and the hidden input associated with it
    $("#minimal_patients_table tr:last").remove();
    $("#minimal_patients_table input:last").remove();
  }
});