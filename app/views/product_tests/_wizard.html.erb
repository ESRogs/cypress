<% content_for :head do %>
  <style type="text/css">
    /* formwizard and validation */
    .navigation_button {
      width : 70px;
    }
    .highlight {background:#DEFADE;}
    .step {height:30em;}
    
    td {vertical-align: top;}
    p {padding:5px;}
    #navigation {
      margin-top : 0.5em;
      margin-right : 1em;
      text-align: center;
      padding-bottom: 1em;
    }
    textarea {
      -moz-border-radius: 5px;
      -webkit-border-radius: 5px;
      border-radius: 5px;
      padding: 4px;
      border: 1px solid #AAAAAA;
    }
    #navigation .noborder {border: 0;color:green;background:transparent;}
    .link {
      height:5em;
      padding:1em;
    }
    .left {float: left;clear:left;}
    .right {float: right;clear:right;}

    input[type=radio] {display:inline-block;}
    dd.wide, span.wide {
      width: 45em;
    }
    #validationErrorMessages {
      text-align:center;
    }
    label.validationErrors {
      color: red;
      font-size: 1em;
      font-weight:bold;
      width: 40em;
      margin-left: 0.5em;
    }
    input.required,textarea.required {background:#FFE9EC;}
    input.valid,textarea.valid {background:#DEFADE;}
    /* vertical tabs */
    .ui-tabs-vertical { width: 55em; }
    .ui-tabs-vertical .ui-tabs-nav { padding: .2em .1em .2em .2em; float: left; width: 12em; }
    .ui-tabs-vertical .ui-tabs-nav li { clear: left; width: 100%; border-bottom-width: 1px !important; border-right-width: 0 !important; margin: 0 -1px .2em 0; }
    .ui-tabs-vertical .ui-tabs-nav li a { display:block; }
    .ui-tabs-vertical .ui-tabs-nav li.ui-tabs-selected { padding-bottom: 0; padding-right: .1em; border-right-width: 1px; border-right-width: 1px; }
    .ui-tabs-vertical .ui-tabs-panel { padding: .5em; float: right; width: 47em;}

    td span.incomplete {background:url(/assets/insufficient.png) 0 50% no-repeat;
                        text-indent:-9999pt;width:16px;
    }
    td span.complete {background:url(/assets/included.png) 0 50% no-repeat;
                      text-indent:-9999pt;width:16px;
    }
    td span.current {background:url(/assets/pass.png) 0 50% no-repeat;
                     text-indent:-9999pt;width:16px;
    }

  </style>
  <script type="text/javascript">
    var cache = {}; // caching inputs for the visited steps
    var overflow = [];
    var usedOverflow = [];

    function updateProgressBar(screen) {
      $('#step1,#step2,#step3,#step4').removeClass('complete current incomplete').addClass('incomplete');
      switch (screen) {
        case "first":
          $('#step1').removeClass('incomplete').addClass('current');
          break;
        case "wizard-measures-screen":
          $('#step1').removeClass('incomplete').addClass('complete');
          $('#step2').removeClass('incomplete').addClass('current');
          break;
        case "wizard-workflow-screen":
          $('#step1,#step2').removeClass('incomplete').addClass('complete');
          $('#step3').removeClass('incomplete').addClass('current');
          break;

        case "wizard-patients-automated-screen":
        case "wizard-patients-manual-screen":
        case "wizard-patients-byod-screen":
          $('#step1,#step2,#step3').removeClass('incomplete').addClass('complete');
          $('#step4').removeClass('incomplete').addClass('current');
          break;
      }
    }
    $(document).ready(function() {
      $.fx.off = true; // disable the annoying animations the wizard uses
      // for styling the vertical tabs
      $('#tabs').tabs().addClass('ui-tabs-vertical ui-helper-clearfix').css({"width":"90%","margin-left":"5%"});
      $("#tabs li").removeClass('ui-corner-top').addClass('ui-corner-left');
      $('#tabs').tabs("select",2)
      // establish the form wizard
      $('#new_product_test').formwizard({
        // !important - otherwise the rails form processing
        // doesn't redirect properly.  set formPluginEnabled to false
        formPluginEnabled: false,
        validationEnabled: true,
        historyEnabled : false, // unless you want back button support ala BBQ
        focusFirstInput : true,
        formOptions : {
          dataType: 'json',
          resetForm: true
        },
        textSubmit: 'Done',
        disableUIStyles: true,
        validationOptions: {
          rules: {
            "product_test[name]": "required",
            "product_test[effective_date_end]": {
              required: true,
              date: true
            },
            "product_test[patient_population]": "required",
            "product_test[measure_ids][]": "required",
            "byod": "required"
          },
          errorClass: "validationErrors",
          messages: {
            "product_test[name]": {required:"The test needs a name."},
            "product_test[effective_date_start]": { required:"Specify the start of the reporting period.", date:"Correct date format: mm/dd/yyyy"},
            "product_test[effective_date_end]": { required:"Specify the end of the reporting period", date:"Correct date format: mm/dd/yyyy"},
            "product_test[patient_population]": { required:"Choose a patient population."},
            "product_test[measure_ids][]": { required:"You must choose at least one quality measure."},
            "byod": { required:"You must provide a .zip file containing your patient records."}
          },
          errorPlacement: function(error, element) {
            error.appendTo( $('#validationErrorMessages') );
          }
        }
      }).bind("step_shown", function(event,data){ //TODO still need to hook up validation
        // do screen-specific functions here
        if (data.currentStep == "wizard-patients-automated-screen") {
          updateDownloadFilename();
        } else if (data.currentStep == "wizard-patients-manual-screen") {
          updateMinimalPatientSet();
        }
        // update the progress indicator
        updateProgressBar(data.currentStep);

        if(data.isLastStep){ // if this is the last step...then
          $("#summaryContainer").empty().append("<ul/>"); // empty the container holding the
          $.each(data.activatedSteps, function(i, id){ // for each of the activated steps...do
            if(id === "wizard-summary-screen") return; // if it is the summary page then just return
            cache[id] = $("#" + id).find(".input"); // else, find the div:s with class="input" and cache them with a key equal to the current step id
            //cache[id].detach().appendTo('#summaryContainer').show().find(":input").removeAttr("disabled"); // detach the cached inputs and append them to the summary container, also show and enable them
            $('#summaryContainer').append("<li>"+cache[id].value+"</li>")
          });
        }else if(data.previousStep === "wizard-summary-screen"){ // if we are movin back from the summary page
          $.each(cache, function(id, inputs){ // for each of the keys in the cache...do
            var i = inputs.detach().appendTo("#" + id).find(":input");  // put the input divs back into their normal step
            if(id === data.currentStep){ // (we are moving back from the summary page so...) if enable inputs on the current step
              i.removeAttr("disabled");
            }else{ // disable the inputs on the rest of the steps
              i.attr("disabled","disabled");
            }
          });
          cache = {}; // empty the cache again
        }
      });
    });

  </script>

<% end %>

<%= simple_form_for([@test], :html => { :method => submit_method, :multipart => true }) do |f| %>
  <%= f.hidden_field :product_id, :value => @product.id %>
  <div id="progress_bar" style="float:right;">
    <table><tr>
        <td>completed:</td>
        <td><span class="current" id="step1">1</span></td>
        <td><span class="incomplete" id="step2">2</span></td>
        <td><span class="incomplete" id="step3">3</span></td>
        <td><span class="incomplete" id="step4">4</span></td>
      </tr>
    </table>
  </div>

  <%= render :partial => "product_tests/wizard_screens/home", :locals => {:f => f} %>
  <%= render :partial => "product_tests/wizard_screens/measures", :locals => {:f => f} %>
  <%= render :partial => "product_tests/wizard_screens/workflow", :locals => {:f => f} %>
  <%= render :partial => "product_tests/wizard_screens/patients", :locals => {:f => f} %>

  <div id="validationErrorMessages"></div>

  <div id="navigation">
    <a class="cmd" id="back"><input class="noborder" value="Back" type="reset" /></a>
    <a class="cmd" id="next"><input class="noborder" value="Next" type="submit" /> </a>
  </div>


<% end %>