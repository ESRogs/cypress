<% content_for :head do %>
  <script type="text/javascript">
    $(document).ready(function() {
      $("#measureMap input:checkbox").change(function() {
        var checkbox = $(this);
        var toggleSetting = checkbox.prop('checked');
        var row = checkbox.closest('dd');
        
        toggleRow(row, toggleSetting);
        
        // If this checkbox is the parent to others, cascade the effect
        if (!row.hasClass("sub")) {
          while ((row = row.closest("dd").next("dd")).hasClass("sub")) {
            checkbox = row.find('input:checkbox');
            checkbox.prop('checked', toggleSetting);

            toggleRow(row, toggleSetting);
          }
        }
      });
      
      $("#measureMap label").click(function() {
        checkbox = $(this).prev('input:checkbox');
        checkbox.prop('checked', !checkbox.prop('checked')).change();
      });
      
      $("#measureMap input:text").keyup(function() {
        if ($(this).val() === '')
          $(this).closest('dd').find('input:checkbox').prop('checked', false).change();
        else 
          $(this).closest('dd').find('input:checkbox').prop('checked', true).change();
      });
      
      $(".measure_expander").toggle(
        function() {
          $(this).addClass('open');
          var element = $(this).data('measure');
          var measures = $("." + element);
          measures.show();
        },
        function() {
          $(this).removeClass('open');
          var element = $(this).data('measure');
          var measures = $("." + element);
          measures.hide();
        });
      
      $("#measureMap input:checkbox").change();
    });
    
    // Add functionality to buttons that check or uncheck all Measures by category in the form.
    function toggleMeasures(toggleSetting, group) {
      var selector = "#measureMap input:checkbox"
      if (group) {
        selector = '#measureMap input:checkbox.' + group;
      }
      $(selector).prop('checked', toggleSetting).change();
    }
    
    function toggleRow(row, toggleSetting) {
      if (toggleSetting)
        row.closest('dd').removeClass('inactive');
      else
        row.closest('dd').addClass('inactive');
      
      var text = row.find('input:text');
      if (toggleSetting && text.val() === '') {
        text.css('border', '1px red solid');
        text.closest('dd').find('.measure_expander').toggle();
      } else {
        text.css('border', '');
      }
    }
    
    function verify() {
      
      
      return false;
    }
  </script>
<% end %>

<%= form_for([@product], :html => { :method => submit_method }) do |f| %>
  <%= f.hidden_field :vendor_id, :value => @vendor.id %>
  
  <h1>Product Information</h1>
  <section id="vendorInfo">
    <dl>
      <dt>Product Name:</dt>
      <dd><%= f.text_field :name, :size=>"20", :class=>"req" %></dd>
      <dt>Description:</dt>
      <dd><%= f.text_field :description, :size=>"20", :class=>"req" %></dd>
    </dl>
  </section>
  
  <h1>Measure Mapping
    <span class="header_commands">
      [<a href="javascript:void(0)" onclick="toggleMeasures('true')">check all</a> |
      <a href="javascript:void(0)" onclick="toggleMeasures(0);">uncheck all</a>]
    </span>
  </h1>
  <section id="measureMap">
    As PQRI measure numbers may vary by author, below is a list of how Cypress labels Stage 1 CQM. If the numbers do not match your PQRI formatting, please
    replace the values with your labeling scheme and Cypress will remember it for later. Cypress will also only show you measures that you check below and
    won't bother you again with unchecked selections.
    <%= render :partial => 'edit_measure_map' %>
  </section>
  
  <a id="vendor_submit" class="cmd disabled" onclick="$(this).parent().submit();" style="display: inline-block"><%= submit_text %></a>
<% end %>