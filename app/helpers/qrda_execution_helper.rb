module QrdaExecutionHelper
NODE_TYPES ={1 => :element ,
2 => :attribute ,
3 => :text,
4 => :cdata,
5 => :ent_ref,
6 => :entity,
7 => :instruction,
8 => :comment,
9 => :document,
10  => :doc_type,
11  => :doc_frag,
12  => :notaion}

def node_type(type)
  return NODE_TYPES[type]
end
   # method used to mark the elements in the document that have errors so they 
  # can be linked to
  def match_errors(test_execution)
    file = test_execution.files[0]
    doc = Nokogiri::XML(file.data)
    error_map = {}
    error_id = 0
    error_attributes = []
    locs = test_execution.execution_errors.collect{|e| e.location}
    locs.compact!

    locs.each do |location|
      # Get rid of some funky stuff generated by schematron
      clean_location = location.gsub("*:", '').gsub("[namespace-uri()='urn:hl7-org:v3']", '')
      node = doc.at_xpath(clean_location)
      if(node)
        elem = node
        if node.class == Nokogiri::XML::Attr
          error_attributes << node
          elem = node.element
        end
        if elem
          
          unless elem['error_id']
            elem['error_id']= "#{error_id}"
            error_id += 1
          end
          error_map[location] = elem['error_id']
        end
      end
    end

    return doc, error_map, error_attributes
  end
  
end
