<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2012r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:for-each select="data">
			<xsl:for-each select="measureIndexData">
				<xsl:result-document href="{fn:concat(fn:string(SetId), '.sch')}" encoding="UTF-8">
					<schema xmlns="http://purl.oclc.org/dsdl/schematron">
						<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://purl.oclc.org/dsdl/schematron C:/Users/rickg/workspaces-svn/ClientProjects/QRDATesting/measure-specific-schematron/schematron.xsd'"/>
						<ns>
							<xsl:attribute name="uri" namespace="" select="'urn:hl7-org:v3'"/>
							<xsl:attribute name="prefix" namespace="" select="'cda'"/>
						</ns>
						<ns>
							<xsl:attribute name="uri" namespace="" select="'urn:hl7-org:sdtc'"/>
							<xsl:attribute name="prefix" namespace="" select="'sdtc'"/>
						</ns>
						<phase>
							<xsl:attribute name="id" namespace="" select="'warnings'"/>
							<active>
								<xsl:attribute name="pattern" namespace="" select="'p'"/>
							</active>
						</phase>
						<pattern>
							<xsl:attribute name="id" namespace="" select="'p'"/>
							<rule>
								<xsl:attribute name="context" namespace="" select="'/cda:ClinicalDocument'"/>
								<xsl:variable name="var3_resultof_filter" as="node()*">
									<xsl:for-each select="*:DataElements[fn:namespace-uri() eq '']">
										<xsl:variable name="var1_resultof_cast" as="xs:string" select="fn:string(*:CdaTemplateId[fn:namespace-uri() eq ''])"/>
										<xsl:variable name="var2_resultof_logical_and" as="xs:boolean" select="((fn:true() and ($var1_resultof_cast != 'null')) and ($var1_resultof_cast != ''))"/>
										<xsl:if test="$var2_resultof_logical_and">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var3_resultof_filter">
									<xsl:variable name="var4_resultof_cast" as="xs:string" select="fn:string(*:Oid[fn:namespace-uri() eq ''])"/>
									<xsl:variable name="var5_resultof_cast" as="xs:string" select="fn:string(*:CdaTemplateId[fn:namespace-uri() eq ''])"/>
									<assert>
										<xsl:attribute name="test" namespace="" select="fn:concat(fn:concat(fn:concat('//*[cda:templateId/@root=''', $var5_resultof_cast), ''']'), fn:concat(fn:concat('[descendant::*/@sdtc:valueSet=''', $var4_resultof_cast), ''']'))"/>
										<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat('For QDT pattern ''', fn:string(*:Name[fn:namespace-uri() eq ''])), ''', QRDA template id &quot;'), $var5_resultof_cast), '&quot; SHOULD be present and SHOULD be bound to value set &quot;'), $var4_resultof_cast), '&quot;. ')"/>
									</assert>
								</xsl:for-each>
							</rule>
						</pattern>
					</schema>
				</xsl:result-document>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
</xsl:stylesheet>
